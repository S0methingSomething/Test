name: Fully Automated BitLife File Extraction

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    - cron: '0 2 * * 1' # Optional: runs automatically every Monday at 2 AM UTC

jobs:
  automated-extraction:
    # CRITICAL CHANGE: Switched to a Linux runner, which has a compatible apkeep binary.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install 'apkeep' to programmatically download the APK
      - name: Download and Install apkeep
        run: |
          # The architecture on ubuntu-latest is x86_64
          ARCH=$(uname -m)
          echo "Detected architecture: $ARCH"

          # CRITICAL CHANGE: The grep pattern now looks for the 'x86_64-unknown-linux-gnu' file, which exists.
          # It also no longer looks for .tar.gz, as the release asset is a direct executable.
          LATEST_APKEEP_URL=$(curl -s "https://api.github.com/repos/EFForg/apkeep/releases/latest" | grep "browser_download_url.*${ARCH}-unknown-linux-gnu" | grep -v ".sig" | cut -d : -f 2,3 | tr -d \")

          if [ -z "$LATEST_APKEEP_URL" ]; then
            echo "::error::Could not find a download URL for apkeep on ${ARCH}-unknown-linux-gnu architecture."
            exit 1
          fi

          echo "Downloading apkeep from $LATEST_APKEEP_URL"
          # CRITICAL CHANGE: Download the executable directly and give it a simple name.
          curl -L -o apkeep "$LATEST_APKEEP_URL"

          # CRITICAL CHANGE: Make the downloaded file executable and move it to the system path.
          chmod +x apkeep
          sudo mv apkeep /usr/local/bin/
          
          apkeep --version # Verify installation

      # Step 2: Download the latest official BitLife APK using apkeep
      # This step remains the same and works perfectly on Linux.
      - name: Download BitLife APK
        run: |
          echo "Downloading latest official BitLife APK..."
          apkeep -a com.candywriter.bitlife .

      # Step 3: Run Android 10 Emulator and the full script
      # This step remains the same. The emulator runner works great on Ubuntu.
      - name: Run Emulator, Install App, and Extract File
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29 # Android 10
          script: |
            echo "--- Installing downloaded BitLife APK ---"
            adb install com.candywriter.bitlife.apk

            echo "--- Launching BitLife to generate files ---"
            adb shell monkey -p com.candywriter.bitlife -c android.intent.category.LAUNCHER 1
            
            echo "--- Waiting 20 seconds for file generation ---"
            sleep 20

            echo "--- Simulating random taps for 1 minute to ensure app runs ---"
            adb shell monkey -p com.candywriter.bitlife --throttle 600 100

            echo "--- Force-stopping app to ensure data is written to disk ---"
            adb shell am force-stop com.candywriter.bitlife

            echo "--- Pulling 'MonetizationVars' file ---"
            adb pull /data/data/com.candywriter.bitlife/files/MonetizationVars .

      # Step 4: Verify and Use the Extracted File
      # This step remains the same.
      - name: Verify and Display Extracted File
        run: |
          if [ -f "MonetizationVars" ]; then
            echo "✅ SUCCESS: 'MonetizationVars' was extracted via full automation."
            echo "--- File Contents ---"
            cat MonetizationVars
            echo "---------------------"
          else
            echo "❌ ERROR: 'MonetizationVars' was NOT found. The automation script likely failed."
            exit 1
          fi

      # Step 5: (Optional) Upload the final result
      # This step remains the same.
      - name: Upload MonetizationVars as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: bitlife-monetization-vars
          path: MonetizationVars

name: Fully Automated BitLife File Extraction

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    - cron: '0 2 * * 1' # Optional: runs automatically every Monday at 2 AM UTC

jobs:
  automated-extraction:
    runs-on: macos-latest

    steps:
      # Step 1: Install 'apkeep' to programmatically download the APK
      - name: Download and Install apkeep
        run: |
          # Dynamically determine the runner's architecture (e.g., 'arm64' or 'x86_64')
          ARCH=$(uname -m)
          echo "Detected architecture: $ARCH"

          # Find the download URL for the correct architecture.
          # The grep pattern now uses the detected $ARCH variable to be future-proof.
          LATEST_APKEEP_URL=$(curl -s "https://api.github.com/repos/EFForg/apkeep/releases/latest" | grep "browser_download_url.*darwin-${ARCH}.tar.gz" | cut -d : -f 2,3 | tr -d \")

          # Add a check to ensure the URL was actually found before proceeding
          if [ -z "$LATEST_APKEEP_URL" ]; then
            echo "::error::Could not find a download URL for apkeep on darwin-${ARCH} architecture."
            exit 1
          fi

          echo "Downloading apkeep from $LATEST_APKEEP_URL"
          curl -L -o apkeep.tar.gz "$LATEST_APKEEP_URL"
          tar -xzf apkeep.tar.gz
          sudo mv apkeep /usr/local/bin/
          apkeep --version # Verify installation

      # Step 2: Download the latest official BitLife APK using apkeep
      - name: Download BitLife APK
        run: |
          echo "Downloading latest official BitLife APK..."
          # The -a flag specifies the app package ID. It will download the APK to the current directory.
          # The filename will be 'com.candywriter.bitlife.apk'
          apkeep -a com.candywriter.bitlife .

      # Step 3: Run Android 10 Emulator and the full script
      - name: Run Emulator, Install App, and Extract File
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29 # Android 10
          script: |
            echo "--- Installing downloaded BitLife APK ---"
            # Installs the APK that apkeep downloaded in the previous step
            adb install com.candywriter.bitlife.apk

            echo "--- Launching BitLife to generate files ---"
            adb shell monkey -p com.candywriter.bitlife -c android.intent.category.LAUNCHER 1
            
            echo "--- Waiting 20 seconds for file generation ---"
            sleep 20

            echo "--- Simulating random taps for 1 minute to ensure app runs ---"
            # This is a robust way to ensure the app is "used"
            # It sends 100 random events over 60 seconds.
            adb shell monkey -p com.candywriter.bitlife --throttle 600 100

            echo "--- Force-stopping app to ensure data is written to disk ---"
            adb shell am force-stop com.candywriter.bitlife

            echo "--- Pulling 'MonetizationVars' file ---"
            adb pull /data/data/com.candywriter.bitlife/files/MonetizationVars .

      # Step 4: Verify and Use the Extracted File
      - name: Verify and Display Extracted File
        run: |
          if [ -f "MonetizationVars" ]; then
            echo "✅ SUCCESS: 'MonetizationVars' was extracted via full automation."
            echo "--- File Contents ---"
            cat MonetizationVars
            echo "---------------------"
          else
            echo "❌ ERROR: 'MonetizationVars' was NOT found. The automation script likely failed."
            exit 1
          fi

      # Step 5: (Optional) Upload the final result
      - name: Upload MonetizationVars as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: bitlife-monetization-vars
          path: MonetizationVars
